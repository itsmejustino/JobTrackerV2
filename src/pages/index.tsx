/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
import React from "react";
import { useRouter } from "next/router";
import { api } from "../utils/api";
import JobList from "./components/Joblist";
import NoSignIn from "./components/NotSignIn";
import { signIn, signOut, useSession } from "next-auth/react";
import toast, { Toaster } from "react-hot-toast";

//1. Capture input in State object. [DONE]
//2. Use object in State to Mutate to database. [DONE]
//3. query database for newly posted input. [DONE]
//4. Map db to create a list of input. [DONE]

const Home: NextPage = () => {
  //uses router to router to reload page after change
  const router = useRouter();
  //retrieves sessionData using useSession method
  const { data: sessionData } = useSession();
  // Mutations and Queries for jobs to the DB
  const createJobMutation = api.jobs.addJob.useMutation();
  const queryUserJobList = api.jobs.getAllUserJobs.useQuery();
  const notify = () => toast('You need to be signed in.', {icon: 'â›”'});

  const getInput = (e: React.FormEvent): void => {
    const userId = sessionData?.user?.id;
    if (!userId) return
    const target = e.target as typeof e.target & {
      jobName: { value: string };
      organization: { value: string };
      platform: { value: string };
      appliedOn: { value: string };
      interviewDate: { value: string };
      followUp: { value: string };
    };

    const jobText = target.jobName.value;
    const orgText = target.organization.value;
    const platformText = target.platform.value;
    const appliedOnDate = target.appliedOn.value;
    const interviewDate = target.appliedOn.value;
    const followUpBool = target.followUp.value;
    createJob(
      userId,
      jobText,
      orgText,
      platformText,
      appliedOnDate,
      interviewDate,
      followUpBool
    ).then(() => {
      queryUserJobList.refetch();
      router.push("/");
    });
    
  };

  const createJob = async (
    userId: string,
    jobName: string,
    company: string,
    platform: string,
    appliedon: string,
    interview: string,
    followup: string
  ): Promise<void> => {
    createJobMutation.mutate({
      userId,
      jobName,
      company,
      platform,
      appliedon,
      interview,
      followup,
    });
  };


  return (
    <>
      <Head>
        <title>Job Tracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <header className="flex content-center items-end justify-between gap-2 rounded-b-xl bg-slate-400 p-2">
        <h2 className="m-4 text-2xl font-semibold">Applications Tracker</h2>
        <div className="m-2 flex flex-col flex-wrap content-center">
          <AuthShowcase />
        </div>
      </header>
      <main className="nav-w-3xl mx-auto my-12  bg-slate-300 p-12">
    
        <div className="flex justify-around gap-3 bg-slate-400 p-3">
          <div className="flex flex-row">
            <button
              type="button"
              className="flex flex-row items-center gap-2 rounded-md bg-blue-400 p-2 text-sm transition hover:bg-blue-500"
            >
              Save Applications List
              <svg
                fill="none"
                stroke="currentColor"
                strokeWidth={1.5}
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                aria-hidden="true"
                className="h-6 w-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z"
                />
              </svg>
            </button>
          </div>
        </div>

        <form
          className="mt-20 flex flex-row flex-wrap items-end justify-center gap-4"
          onSubmit={getInput}
        >
          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Job Name
            </label>
            <input
              name="jobName"
              type="text"
              id="small-input"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>

          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Company/Organization
            </label>
            <input
              name="organization"
              type="text"
              id="small-input"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>

          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Platform Applied On
            </label>
            <input
              name="platform"
              type="text"
              id="small-input"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>

          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Applied On-Date
            </label>
            <input
              name="appliedOn"
              type="date"
              id="small-input"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>

          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Interview Date
            </label>
            <input
              name="interviewDate"
              type="date"
              id="small-input"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>
          <div className="flex flex-col gap-0">
            <label className="mb-2 block text-sm font-medium text-gray-900 dark:text-white">
              Follow Up
            </label>
            <input
              name="followUp"
              type="date"
              date-format="DD-MMMM-YYYY"
              id="default-checkbox"
              className="w-100 block rounded-lg border border-gray-300 bg-gray-50 p-2 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500 sm:text-xs"
            />
          </div>

          <button
            type="submit"
            // onClick={(event)=>{
            //   event.preventDefault();
            //   if(!sessionData )notify();
            // }}
            className="flex flex-row items-center gap-2 rounded-md bg-blue-400 p-2 text-sm transition hover:bg-blue-500"
          >
            Add Job{" "}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="h-6 w-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 4.5v15m7.5-7.5h-15"
              />
            </svg>
          </button>
        </form>
      </main>
      <section className="flex flex-wrap justify-around gap-2">
        { !sessionData ? <NoSignIn/> : <JobList/>}
        <Toaster />
      </section>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const myImage: any = sessionData && sessionData.user?.image;
  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      {sessionData && (
        <img
          src={myImage}
          alt="user avatar"
          className="h-20 w-20 rounded-full"
        />
      )}
      <button
        className="hover:bg-slate/20 rounded-full bg-slate-700 px-10 py-3 font-semibold text-white no-underline transition"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
